<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:c="http://www.springframework.org/schema/c"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd">
	
	<!-- HandlerMapping, HandlerAdapter, ViewResolver, Validator 등의 MVC 프로그래밍 모델에서 사용될 전략 개체들이 자동 등록됨 -->
	<mvc:annotation-driven validator="validator"></mvc:annotation-driven>
	
	<!-- 로케일에 따른 언어별 메시지 처리를 위한 전략 객체 -->
	<bean id="messageSource" class="org.springframework.context.support.ResourceBundleMessageSource" 
		p:basenames="kr.or.ddit.msgs.errorMessage, kr.or.ddit.msgs.message"
	/>
	
	<bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" 
		p:validationMessageSource-ref="messageSource"
	/>
	
	<bean id="IRVR" class="org.springframework.web.servlet.view.InternalResourceViewResolver" 
		p:prefix="/WEB-INF/jsp/"
		p:suffix=".jsp"
	/>
	<!-- 얘는 가장 뒤로 순서를 보내야한다. order를 설정하지 않으면 가장 우선이다 -->
	
	<bean id="BNVR" class="org.springframework.web.servlet.view.BeanNameViewResolver" 
		p:order="1"
	/> <!-- jsonView가 오더 순서를 넣어서 첫번째로 BNVR로 와서 아이디와 매치한다-->
	
	<bean id="jsonView" class="org.springframework.web.servlet.view.json.MappingJackson2JsonView" 
	/>
	
	<!-- Tiles Context 형성 -->
	<bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer"
		p:definitions="/WEB-INF/tiles/*-definitions.xml"
		p:preparerFactoryClass="org.springframework.web.servlet.view.tiles3.SpringBeanPreparerFactory"
	/>
	<bean id="TVR" class="org.springframework.web.servlet.view.tiles3.TilesViewResolver" 
		p:order="2"
	/>
	
	<!-- Controller layer를 bean으로 등록하기 위한 필터링 설정 -->
	<context:component-scan base-package="kr.or.ddit" use-default-filters="false">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>
	
	
	<!-- LocaleChangeInterceptor가 변경한 로케일 정보를 저장하기 위해 사용하는 전략객체  -->
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.CookieLocaleResolver" 
		p:cookieName="localeCookie"
		p:cookiePath="/"
		p:cookieMaxAge="#{60*60*24*5}"
	/>
	
	<!-- HandlerInterceptor : 스프링 컨테이너 밖에 존재하는 웹 필터의 역할을 대신하는 객체 -->
	<!-- 스프링에서는 **를 두개를 넣으면 모든 단계까지 다 닿을 수 있다. /* -> /member까지만 닿는다 -->
	<mvc:interceptors><!-- FilterChain의 역할을 하고 있다. 컨테이너 안에 있는 것들을 대상으로 하는 -->
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<!-- Language 이름의 요청 파라미터를 기준으로 현재 로케일을 변경하기 위한 인터셉터 -->
			<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor" 
				p:paramName="language"
			/>
		</mvc:interceptor>
	</mvc:interceptors>
	
	<mvc:resources location="/resources/" mapping="/resources/**" cache-period="0"/>
	<!-- 0을 쓰면 캐시를 저장하지 않고 바로 클라이언트에게 보여질 수 있게 된다. -->
	<!-- 정적 자원을 다르기 위해 일괄 관리를 하는 경우 활용 -->
	
	<!-- Custom view preparer -->
	<bean id="boardViewPreparer" class="kr.or.ddit.board.view.preparer.boardViewPreparer" />
</beans>
