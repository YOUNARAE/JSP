package kr.or.ddit.marshalling;

import static org.junit.Assert.*;

import java.util.LinkedHashMap;
import java.util.Map;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;

public class Marshalling {
	
	Object target;
	ObjectMapper mapper;

	@Before
	public void setUp() throws Exception {
		System.out.println("before");
		target = new LinkedHashMap<>();
		((Map)target).put("key1","SAMPLE");
		((Map)target).put("key2", new Boolean(true));
		((Map)target).put("key3", new Double(2.3d));
		mapper = new ObjectMapper();
	}


	@After
	public void tearDown() throws Exception {
		System.out.println("after");
	}

	@Test
	public void test1() throws JsonProcessingException {
//		1. native => json : marshalling - writeXXX
		String json = mapper.writeValueAsString(target);
		System.out.println(json);
//		2. json => native : unmarshalling - read
		Map<String, Object> map = mapper.readValue(json, Map.class);
		System.out.println(map);
	}
	
	@Test
	public void test2() throws JsonProcessingException {
//		1. native => json : marshalling - writeXXX
		String json = mapper.writeValueAsString(target);
//		1-1. serialization : 객체의 상태를 전송이나 저장이 가능한 형태로 스트링화.(바이트 배열로 변환)
		
		System.out.println(json);
//		2. json => native : unmarshalling - read
		Map<String, Object> map = mapper.readValue(json, Map.class);
		System.out.println(map);
	}
}
