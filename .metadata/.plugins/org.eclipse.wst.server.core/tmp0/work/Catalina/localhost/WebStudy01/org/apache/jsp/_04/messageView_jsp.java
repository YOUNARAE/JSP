/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.84
 * Generated at: 2022-12-13 06:18:29 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._04;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class messageView_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>04/messageView.jsp</title> <!-- 절대경로, 클라이언트방식 -->\r\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(request.getContextPath() );
      out.write("/resources/jquery-3.6.1.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<select id=\"selName\">\r\n");
      out.write("	<option>prop1</option>\r\n");
      out.write("	<option>prop2</option>\r\n");
      out.write("	<option>prop3</option>\r\n");
      out.write("	<option>prop4</option>\r\n");
      out.write("	<option>prop5</option>\r\n");
      out.write("	<option>hi</option>\r\n");
      out.write("	\r\n");
      out.write("	<!-- model,model2,동기,비동기든 값 가져와서 돌리기 -->\r\n");
      out.write("</select>\r\n");
      out.write("<body>\r\n");
      out.write("<h4 id=\"greetingArea\" data-key1=\"prop1\" data-key2=\"sample\" data-other-key=\"TEST\"></h4>\r\n");
      out.write("<input type=\"radio\" name=\"dataType\" data-data-type=\"json\" checked/>JSON <!-- 속성이 불린타입이면  checked=checked를 생략가능 -->\r\n");
      out.write("<input type=\"radio\" name=\"dataType\" data-data-type=\"xml\"/>XML\r\n");
      out.write("<input type=\"radio\" name=\"dataType\" data-data-type=\"text\"/>PLAIN\r\n");
      out.write("\r\n");
      out.write("<input type=\"radio\" name=\"language\" data-locale=\"kor\"/>한국어\r\n");
      out.write("<input type=\"radio\" name=\"language\" data-locale=\"en\"/>영어\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("	let greetingArea = $(\"#greetingArea\");\r\n");
      out.write("	console.log(greetingArea.data(\"key1\"));\r\n");
      out.write("	console.log(greetingArea.data(\"otherKey\"));\r\n");
      out.write("	greetingArea.data(\"key2\",\"otherValue\");\r\n");
      out.write("	console.log(greetingArea.data(\"key2\"));\r\n");
      out.write("	let radioBtns = $('[type=\"radio\"]');\r\n");
      out.write("	\r\n");
      out.write("	let dataTypes = radioBtns.filter(\"[name=dataType]\");\r\n");
      out.write("	let locales = radioBtns.filter(\"[name=language]\");\r\n");
      out.write("	let successes = {\r\n");
      out.write("		json:function(resp){\r\n");
      out.write("			console.log(resp);\r\n");
      out.write("			greetingArea.text(resp.message);\r\n");
      out.write("		},\r\n");
      out.write("		xml:function(docResp){\r\n");
      out.write("			console.log(docResp);\r\n");
      out.write("			let message = $(docResp).find(\"message\").text();\r\n");
      out.write("			greetingArea.html(message);\r\n");
      out.write("		},\r\n");
      out.write("		text:function(plain){\r\n");
      out.write("			console.log(plain);\r\n");
      out.write("			greetingArea.html(plain);\r\n");
      out.write("		}\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("	let settings={\r\n");
      out.write("		url : \"");
      out.print(request.getContextPath() );
      out.write("/04/getGreetingMessage\", \r\n");
      out.write("		\r\n");
      out.write("		error : function(jqXHR, status, error) {\r\n");
      out.write("			console.log(jqXHR);\r\n");
      out.write("			console.log(status);\r\n");
      out.write("			console.log(error);\r\n");
      out.write("		}\r\n");
      out.write("	};\r\n");
      out.write("	\r\n");
      out.write("	radioBtns.on(\"change\",function(){\r\n");
      out.write("//		greetingArea.empty();\r\n");
      out.write("		greetingArea.html(\"\");\r\n");
      out.write("		let dataType = dataTypes.filter(\":checked\").data(\"dataType\");\r\n");
      out.write("		settings.dataType=dataType;\r\n");
      out.write("		settings.success=successes[dataType];\r\n");
      out.write("		settings.data={\r\n");
      out.write("// 			name:greetingArea.data(\"key1\")\r\n");
      out.write(" 			name:greetingArea.attr(\"data-key1\")\r\n");
      out.write("		}\r\n");
      out.write("		let locale = locales.filter(\":checked\").data(\"locale\");\r\n");
      out.write("		if(locale){\r\n");
      out.write("// 			settings.data = {\r\n");
      out.write("// 				locale:locale\r\n");
      out.write("// 			}\r\n");
      out.write("			settings.data.locale=locale;\r\n");
      out.write("		}\r\n");
      out.write("		console.log(\"===========================\");	\r\n");
      out.write("		console.log(settings);	\r\n");
      out.write("		console.log(\"===========================\");	\r\n");
      out.write("		$.ajax(settings);\r\n");
      out.write("	}).trigger(\"change\"); \r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
