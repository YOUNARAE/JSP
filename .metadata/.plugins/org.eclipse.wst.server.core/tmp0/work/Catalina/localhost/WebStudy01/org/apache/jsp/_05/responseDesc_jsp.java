/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.84
 * Generated at: 2022-12-13 06:22:02 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._05;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import javax.print.attribute.HashPrintServiceAttributeSet;

public final class responseDesc_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("javax.print.attribute.HashPrintServiceAttributeSet");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>05/responseDesc.jsp</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h4>response(HttpServletResponse)</h4>\r\n");
      out.write("<pre>\r\n");
      out.write("	Http의 response packaging\r\n");
      out.write("	1. Response Line : Status Code(응답상태코드, XXX)\r\n");
      out.write("	    100~ : \r\n");
      out.write("	    200~ : OK \r\n");
      out.write("	    300~ : 최종 처리하기 위하 클라이언트의 추가 액션이 필요함. (response body가 없음.) \r\n");
      out.write("	    		-개발자가 직접 셋팅하지 않는다. \r\n");
      out.write("	            -개발자가 직접 사용하는 게 아니라 서버나 프레임워크에서 정해줌 \r\n");
      out.write("	            -300번대는 받았다면 뭔가 더 처리를 해주어야 없어진다는 의미이다, 응답을 받은 후에 사용자가 뭔가가 한가지 액션을 더 해야한다. ex)나래 범수 예시\r\n");
      out.write("	        304(cache data 관련) : Not modified \r\n");
      out.write("	        301/302/307 : Moved + Location response header와 함께 사용.(redirect request)\r\n");
      out.write("	        ");

//	        	request.getRequestDispatcher("/04/messageView.jsp").forward(request, response); // 서버 내에서 이동
//				절대경로, 서버사이드, 
// 				String location = request.getContextPath()+"/04/messageView.jsp";  
// 	        	response.sendRedirect(location); //서버 밖에서 이동해야하기때문에 클라이언트로부터 새로운 요청이 발생.
	        
      out.write("\r\n");
      out.write("	    400~ : client side error -> Fail\r\n");
      out.write("			-클라이언트서버에서 문제가 생겼을 때, 아무나 클라이언트를 허용해서는 안된다(클라이언트가 다 선한 목적을 가지지는 않음)\r\n");
      out.write("	    	-서버사이드에서 문제가 생겼을 때 클라이언트쪽에 요청을 안 줘야한다.\r\n");
      out.write("	    	-구체적으로 상태코드가 여러가지로 쪼개서 사용한다\r\n");
      out.write("	    	400 : ");
      out.print(HttpServletResponse.SC_BAD_REQUEST );
      out.write(", 클라이언트 전송 데이터(파라미터) 검증 시 활용.\r\n");
      out.write("	    	401 / 403 : 인증(Authentication, 신원을 확인하는 것)과 인가(Authorization, 신원확인을 마친 사람에게 권한이 주어졌는지를 확인하는 과정) 기반의 접근 제어에 활용\r\n");
      out.write("	    	      ");
      out.print(HttpServletResponse.SC_UNAUTHORIZED );
      out.write(',');
      out.print(HttpServletResponse.SC_FORBIDDEN );
      out.write("\r\n");
      out.write("	    	      \r\n");
      out.write("	    	404 : ");
      out.print(HttpServletResponse.SC_NOT_FOUND );
      out.write("\r\n");
      out.write("	    	405 : ");
      out.print(HttpServletResponse.SC_METHOD_NOT_ALLOWED );
      out.write(", 현재 요청의 메소드에 대한 콜백 메소드가 재정의되지 않았을 때\r\n");
      out.write("	    	406/415 : contextn-type(MIME)과 관련된 상태코드\r\n");
      out.write("	    	");
      out.print(HttpServletResponse.SC_NOT_ACCEPTABLE );
      out.write(" : Accept request 헤어데 설정된 MIME 데이터를 만들어낼 수 없을 때.\r\n");
      out.write("	    		ex)accept:application/json(XXX)\r\n");
      out.write("	    	");
      out.print(HttpServletResponse.SC_UNSUPPORTED_MEDIA_TYPE );
      out.write(" : Content-Type request 헤더를 해석할 수 없을 때.\r\n");
      out.write("	    		ex)content-type:application/json --> unmarshalling(XXX)\r\n");
      out.write("	    	\r\n");
      out.write("	    500~ : server side error -> Fail, 500(Internal Server Error)\r\n");
      out.write("	    \r\n");
      out.write("	2. Response Header\r\n");
      out.write("	3. Response Body(Content body, message body) :\r\n");
      out.write("			response.getWriter(), response.getOutputStream()\r\n");
      out.write("	\r\n");
      out.write("</pre>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
