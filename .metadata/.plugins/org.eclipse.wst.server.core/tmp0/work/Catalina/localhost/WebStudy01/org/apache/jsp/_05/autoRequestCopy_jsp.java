/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.84
 * Generated at: 2022-12-14 09:45:42 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._05;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Date;
import java.util.Locale;

public final class autoRequestCopy_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Date");
    _jspx_imports_classes.add("java.util.Locale");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>05/autoRequest.jsp</title>\r\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/jquery-3.6.1.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<!-- 문제 : radio버튼을 이용해서 파일 형식에 맞게 출력될 수 있도록하고,시작,중단버튼을 이용해서\r\n");
      out.write("          시간 제어가 가능해야한다. -->\r\n");
      out.write('\r');
      out.write('\n');
      out.write("\r\n");
      out.write("<h4>현재 서버의 시간 : <span id=\"timeArea\"> </span></h4>\r\n");
      out.write("<button class=\"controlBtn\"  data-control-type=\"START\">시작</button>\r\n");
      out.write("<button class=\"controlBtn\"  data-control-type=\"STOP\">멈춤</button>\r\n");
      out.write("<input type=\"radio\" name=\"dataType\" data-data-type=\"json\" />JSON\r\n");
      out.write("<input type=\"radio\" name=\"dataType\" data-data-type=\"text\" />PLAIN\r\n");
      out.write("<input type=\"radio\" name=\"locale\" value=\"");
      out.print(Locale.KOREAN.toLanguageTag());
      out.write("\" checked />한국어\r\n");
      out.write("<input type=\"radio\" name=\"locale\" value=\"");
      out.print(Locale.ENGLISH.toLanguageTag());
      out.write("\" />영어\r\n");
      out.write("<input type=\"radio\" name=\"locale\" value=\"");
      out.print(Locale.JAPANESE.toLanguageTag());
      out.write("\" />일본어\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("	// 먼저 jsp에서 UI 작업을 먼저 해준다\r\n");
      out.write("	let timeArea = $(\"#timeArea\"); // span태그를 아이디를 이용해 timeArea에 제이쿼리 객체로 담는다 \r\n");
      out.write("	//1단계 : 없던 버튼이 생겼다. 버튼에 대한 이벤트를 처리해준다\r\n");
      out.write("	// 이벤트는 클릭이벤트다.\r\n");
      out.write("	let controlBtns = $(\".controlBtn\").on(\"click\",function(){ //.controlBtn를 제이쿼리 객체로 만들어서 클릭이벤트를 열어준다\r\n");
      out.write("		//버튼이 2개이기 때문에 2개를 걸러주는 작업을 해야한다.\r\n");
      out.write("		//이 버튼을 눌렀을 때\r\n");
      out.write("		let controlType = $(this).data(\"controlType\"); \r\n");
      out.write("		//눌린 버튼을 제이쿼리 객체화를 시켜서 controlType에 담았다\r\n");
      out.write("		console.log(controlType);\r\n");
      out.write("		if(controlType==\"START\"){\r\n");
      out.write("			//버튼이 시작하면 시계가 작동해야된다\r\n");
      out.write("			let watch = setInterval(sendRequest,1000); //?이부분 와치를 넣은 이유를 모름\r\n");
      out.write("			timeArea.data(\"watch\", watch); //타임 제이쿼리 객체에 data-watch-type을 넣는다\r\n");
      out.write("			//이 설정값은 setInterval을 담고 있다\r\n");
      out.write("		} else {\r\n");
      out.write("			//버튼이 중지일 때 시계가 멈춘다\r\n");
      out.write("			let watch = timeArea.data(\"watch\");\r\n");
      out.write("			if(watch){						\r\n");
      out.write("				clearInterval(watch);\r\n");
      out.write("				timeArea.data(\"watch\", null);\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	let sendRequest = function(){\r\n");
      out.write("		//2단계 : 라디오버튼이 선택되면 선택된 json이나 text dataType으로 떠야한다\r\n");
      out.write("		//필요한 준비물 \r\n");
      out.write("		let dataTypes = $('[name=\"dataType\"]'); //여기에 2개 변수 가능\r\n");
      out.write("		let locales = $('[name=\"locale\"]'); //여기에 3개 변수가능\r\n");
      out.write("\r\n");
      out.write("		let sucesses = {\r\n");
      out.write("			json:function(resp){\r\n");
      out.write("				timeArea.html(resp.now);\r\n");
      out.write("			},\r\n");
      out.write("			test:function(plain){\r\n");
      out.write("				timeArea.html(plain);\r\n");
      out.write("			},\r\n");
      out.write("		}\r\n");
      out.write("		\r\n");
      out.write("		//네임이 같은 라디오 버튼 중에서 \r\n");
      out.write("		let dataType = dataTypes.filter(\":checked\").data('dataType');\r\n");
      out.write("		//하지만 처음에 시작할 때 아무것도 체크해주지 않은 상태였다.\r\n");
      out.write("		//체크된 것이 없을 때에는 json으로 우선 보여준다는 처리를 해줘야함\r\n");
      out.write("		\r\n");
      out.write("		console.log(dataType)\r\n");
      out.write("		//체크된 레디오 버튼에 대해서 선택한 값 data-type\r\n");
      out.write("		//3단계 : 라디오 버튼이 선택되면 선택된 언어로 파라미터를 받아와야한다.\r\n");
      out.write("		let locale = locales.filter(\":checked\").val();\r\n");
      out.write("		\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			url : \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/05/getServerTimeCopy\",\r\n");
      out.write("			dataType : dataType,\r\n");
      out.write("			success : sucesses[dataType],\r\n");
      out.write("			error : function(jqXHR, status, error) {\r\n");
      out.write("				console.log(jqXHR);\r\n");
      out.write("				console.log(status);\r\n");
      out.write("				console.log(error);\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write("	}\r\n");
      out.write("	\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
