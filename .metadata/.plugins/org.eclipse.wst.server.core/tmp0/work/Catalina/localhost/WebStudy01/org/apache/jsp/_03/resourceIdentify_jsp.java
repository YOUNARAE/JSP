/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.84
 * Generated at: 2022-12-08 06:12:04 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._03;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.nio.file.StandardCopyOption;
import java.nio.file.Paths;
import java.nio.file.Files;
import java.io.InputStream;
import java.net.URLConnection;
import java.net.URL;
import kr.or.ddit.servlet01.DescriptionServlet;
import java.io.File;

public final class resourceIdentify_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.nio.file.Paths");
    _jspx_imports_classes.add("java.nio.file.Files");
    _jspx_imports_classes.add("java.net.URLConnection");
    _jspx_imports_classes.add("java.net.URL");
    _jspx_imports_classes.add("kr.or.ddit.servlet01.DescriptionServlet");
    _jspx_imports_classes.add("java.io.File");
    _jspx_imports_classes.add("java.nio.file.StandardCopyOption");
    _jspx_imports_classes.add("java.io.InputStream");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>03/resourceIdentify.jsp</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h4>자원의 종류와 식별방법</h4>\r\n");
      out.write("<pre>\r\n");
      out.write("	: 자원의 위치와 경로 표기 방법에 따라 분류\r\n");
      out.write("	\r\n");
      out.write("	1.File system resource : d:/contents/images/cat1.jpg\r\n");
      out.write("	");

		String realPath="d:/contents/images/cat1.jpg";
		File fileSystemResource = new File(realPath);
		
	
      out.write("\r\n");
      out.write("	파일의 크기 : ");
      out.print(fileSystemResource.length() );
      out.write("\r\n");
      out.write("\r\n");
      out.write("	2.Class path resource : /kr/or/ddit/images/cat2.png \r\n");
      out.write("	");

		String qualifiedName = "../images/cat2.png";
		realPath = DescriptionServlet.class.getResource(qualifiedName).getFile();
		realPath = DescriptionServlet.class.getClassLoader().getResource("kr/or/ddit/images/cat2.png").getFile();
		File classPathResource = new File(realPath);
	
      out.write("\r\n");
      out.write("	실제경로 : ");
      out.print(realPath );
      out.write("\r\n");
      out.write("	파일의 크기 : ");
      out.print(classPathResource.length() );
      out.write("\r\n");
      out.write("`\r\n");
      out.write("	3.Web resource : https://www.google.com/logos/doodles/2022/seasonal-holidays-2022-6753651837109831.3-law.gif\r\n");
      out.write("	http://localhost/WebStudy01/resources/jquery-3.6.1.min.js\r\n");
      out.write("	");

		String resourceURL = "http://localhost/WebStudy01/resources/jquery-3.6.1.min.js";
//		String resourceURL = "https://www.google.com/logos/doodles/2022/seasonal-holidays-2022-6753651837109831.3-law.gif";
		URL url = new URL(resourceURL);
		URLConnection conn = url.openConnection();
		String resourcePath = url.getPath();
		int lastIdx = resourcePath.lastIndexOf('/');
		String fileName = resourcePath.substring(lastIdx+1);
		String folderPath = "d:/contents/images";
		File downloadFile = new File(folderPath, fileName);
		InputStream is = conn.getInputStream();
		Files.copy(is, Paths.get(downloadFile.getPath()), StandardCopyOption.REPLACE_EXISTING);
	
      out.write("\r\n");
      out.write("	resourcePath : ");
      out.print(resourcePath );
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	** 웹자원에 대한 식별성 : URI\r\n");
      out.write("	URI(Uniform Resource Identifier : 범용 자원 식별자)\r\n");
      out.write("	\r\n");
      out.write("	URL(Uniform Resource Locateor : 범용 자원 위치자)\r\n");
      out.write("	URN(Uniform Resource Name : 같은 이름이 있으면 중복되고, 우선 등록되어있는 출석부의 개념이 필요하다. 이름을 파악하기 위해서 )\r\n");
      out.write("	URC(Uniform Resource Content : 이름에 속성까지 더해져서 부르는 URN의 단점을 극복하기 위한 방법 )\r\n");
      out.write("	\r\n");
      out.write("	URL 구조\r\n");
      out.write("	http://localhost/WebStudy01/resources/jquery-3.6.1.min.js\r\n");
      out.write("	프로토콜 / \r\n");
      out.write("	protocol(scheme)://IP(DN):port/context/depth1.....depthN/resourceName/\r\n");
      out.write("	//-> 루트를 표현하기 위한 구분자\r\n");
      out.write("	\r\n");
      out.write("	DomainName \r\n");
      out.write("	3 level www.naver.com - 가장 마지막에 있는 레벨 GlobalTopLevelDomain : GTLD\r\n");
      out.write("	4 level www.naver.co.kr - NationalTopLevelDomain : NTLD\r\n");
      out.write("	\r\n");
      out.write("	URL 표기방식\r\n");
      out.write("	절대경로(**) : 최상위루트부터 전체 경로 표현 - 생략가능한 요소가 존재.\r\n");
      out.write("	    클라이언트가 접근하느냐 내가 접근하느냐에 따라 주소가 달라질 수 있다\r\n");
      out.write("		client side : /WebStudy01/resources/images/cat1.jpg\r\n");
      out.write("		server side : /resources/images/cat1.jpg\r\n");
      out.write("	상대경로 : 기준점(브라우저의 현재 주소)을 중심으로 경로 표현, 앞에 슬러시가 없으면 상대경로디다\r\n");
      out.write("</pre>\r\n");

	//InputStream is2 = application.getResourceAsStream(request.getContextPath() + "/resources/images/cat1.jpg");
	String realPath1 = application.getRealPath("/resources/images/cat1.jpg");
	String realPath2 = application.getRealPath(request.getContextPath()+"/resources/images/cat1.jpg");

      out.write("\r\n");
      out.write("<img src=\"");
      out.print(request.getContextPath());
      out.write("/resources/images/cat1.jpg\" alt=\"\"/>\r\n");
      out.write("<img src=\"../resources/images/cat1.jpg\" alt=\"\"/>\r\n");
      out.write("<img src=\"cat1.jpg\" alt=\"\"/><br/>\r\n");
      out.write("\r\n");
      out.write("realPath1 : ");
      out.print(realPath1 );
      out.write("<br/>\r\n");
      out.write("realPath2 : ");
      out.print(realPath2 );
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
