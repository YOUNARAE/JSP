/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.84
 * Generated at: 2022-12-02 08:46:16 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views._02;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.io.File;

public final class imageForm_005fajax_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.io.File");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("<!-- jpeg-red, png-green, gif-blue  -->\r\n");
      out.write("<style type=\"text/css\">\r\n");
      out.write("	.red{\r\n");
      out.write("		background-color:red;\r\n");
      out.write("	}\r\n");
      out.write("	.green{\r\n");
      out.write("		background-color:springgreen;\r\n");
      out.write("	}\r\n");
      out.write("	.blue{\r\n");
      out.write("		background-color:blue;\r\n");
      out.write("	}\r\n");
      out.write("</style>\r\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(request.getContextPath() );
      out.write("/resources/jquery-3.6.1.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<form name=\"imgForm\" action='");
      out.print(request.getContextPath() );
      out.write("/imageStreaming.do'>\r\n");
      out.write("	<select name='image'> \r\n");
      out.write("	</select>\r\n");
      out.write("	<input type='submit' value='전송' />\r\n");
      out.write("	</form>\r\n");
      out.write("	<div id=\"imgArea\">\r\n");
      out.write("	</div>\r\n");
      out.write("	\r\n");
      out.write("	<script type=\"text/javascript\">\r\n");
      out.write("	 const DIVTAG = $(\"#imgArea\");\r\n");
      out.write("	 const SELECTTAG = $(\"[name=image]\").on(\"change\",function(event){ // 자바로 치면 final. 상수로 만든다\r\n");
      out.write("		 let option = $(this).find(\"option:selected\"); //옵션을 찾았음\r\n");
      out.write("		 let mime = option.attr(\"class\");\r\n");
      out.write("		 let clzName = matchedClass(mime);\r\n");
      out.write("		 $(this).removeClass(colors);\r\n");
      out.write("		 $(this).addClass(clzName);\r\n");
      out.write("		 \r\n");
      out.write("		 let srcURL = document.imgForm.action;\r\n");
      out.write("		 let queryString = $(document.imgForm).serialize();\r\n");
      out.write("		 let src = \"%U?%P\".replace(\"%U\",srcURL).replace(\"%P\",queryString);\r\n");
      out.write("		 \r\n");
      out.write("		 let img = $(\"<img>\").attr(\"src\", src)\r\n");
      out.write("		 DIVTAG.html(img);\r\n");
      out.write("	 }); \r\n");
      out.write("	 const changeCondition = {\r\n");
      out.write("		jpeg:\"red\"\r\n");
      out.write("		, png:\"green\"\r\n");
      out.write("		, gif:\"blue\"\r\n");
      out.write("	 }\r\n");
      out.write("	 const colors = [];\r\n");
      out.write("	 $.each(changeCondition, function(prop,propValue){\r\n");
      out.write("		 console.log(prop+\", \"+propValue)\r\n");
      out.write("		 colors.push(propValue);\r\n");
      out.write("	 });\r\n");
      out.write("	 \r\n");
      out.write("	 let matchedClass = function(mime){ // 자바스크립트에서는 함수도 객체다\r\n");
      out.write("		 let clzName = \"\";\r\n");
      out.write("		 for(let prop in changeCondition){\r\n");
      out.write("			let idx = mime.indexOf(prop);	\r\n");
      out.write("			if(idx>=0){\r\n");
      out.write("				clzName = changeCondition[prop];\r\n");
      out.write("				break;\r\n");
      out.write("			}\r\n");
      out.write("		 }\r\n");
      out.write("		 return clzName;\r\n");
      out.write("	 }\r\n");
      out.write("	 $.ajax({\r\n");
      out.write("	      dataType : \"json\",\r\n");
      out.write("	      success : function(resp) { //언마샬링이 끝나서 돌아온다\r\n");
      out.write("			console.log(resp.length);\r\n");
      out.write("	        let options = []; //비어있는 배열로 옵션을 만든다.옵션 텍스트 자체를 만드는 것이 아님\r\n");
      out.write("	      //컨트롤 쉬프트 C를 누르면 한줄 주석이 된다\r\n");
      out.write("	      	$.each(resp, function(index, file){\r\n");
      out.write("	      		let option = $(\"<option>\")\r\n");
      out.write("	      					.addClass(file.mime)\r\n");
      out.write("	      					.html(file.name); // 옵션태그가 1개 만들어짐\r\n");
      out.write("	      		options.push(option);\r\n");
      out.write("	      	});\r\n");
      out.write("	      	SELECTTAG.append(options);\r\n");
      out.write("	      },\r\n");
      out.write("	      error : function(jqXHR, status, error) {\r\n");
      out.write("	         console.log(jqXHR);\r\n");
      out.write("	         console.log(status);\r\n");
      out.write("	         console.log(error);\r\n");
      out.write("	      }\r\n");
      out.write("	   });\r\n");
      out.write("	  /* $(\"select\").on(\"change\",function(){\r\n");
      out.write("		if($('select option:selected').attr('class')==\"image/jpeg\"){\r\n");
      out.write("			$(this).attr(\"class\",\"image/jpeg red\");\r\n");
      out.write("		} else if($('select option:selected').attr('class')==\"image/png\"){\r\n");
      out.write("			$(this).attr(\"class\",\"image/png green\");\r\n");
      out.write("		} else if($('select option:selected').attr('class')==\"image/gif\"){\r\n");
      out.write("			$(this).attr(\"class\",\"image/gif blue\");\r\n");
      out.write("		} else {\r\n");
      out.write("			\r\n");
      out.write("		}\r\n");
      out.write("	  }); */\r\n");
      out.write("	  \r\n");
      out.write("	  \r\n");
      out.write("	</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
