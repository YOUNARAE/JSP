/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.84
 * Generated at: 2022-12-13 10:10:40 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._05;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Locale;
import java.util.Date;

public final class autoRequest_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Locale");
    _jspx_imports_classes.add("java.util.Date");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<!-- <meta http-equiv=\"Refresh\" content=\"5;url=https://www.naver.com\"> --> <!-- 클라이언트방식 -->\r\n");
      out.write("<title>05/autoRequest.jsp</title>\r\n");
      out.write("<style>\r\n");
      out.write("	.disabled{\r\n");
      out.write("		display: none;\r\n");
      out.write("	}\r\n");
      out.write("</style>\r\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/resources/jquery-3.6.1.min.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<h4>Refresh 헤더 활용</h4>\r\n");
      out.write("\r\n");
      out.write("<pre>클라이언트의 상태를 유지해줄 수 없는 것이 Refresh의 단점, 락이 걸린다.\r\n");
      out.write("두가지 방법 다 동기요청 방식이다\r\n");
      out.write("\r\n");
      out.write("	서버의 갱신 데이터 확보(동기 요청 구조)\r\n");
      out.write("	1. Refresh response header\r\n");
      out.write("	2. meta tag\r\n");
      out.write("	3. reload\r\n");
      out.write("</pre>\r\n");
      out.write("<h4>현재 서버의 시간 : <span id=\"timeArea\"> </span></h4> \r\n");
      out.write("<button class=\"controlBtn\" data-control-type=\"START\">시작</button>\r\n");
      out.write("<button class=\"controlBtn disabled\" data-control-type=\"STOP\">멈춤</button>\r\n");
      out.write("<input type=\"radio\" name=\"dataType\" data-data-type=\"json\" />JSON\r\n");
      out.write("<input type=\"radio\" name=\"dataType\" data-data-type=\"text\" />PLAIN\r\n");
      out.write("<input type=\"radio\" name=\"locale\" value=\"");
      out.print(Locale.KOREAN.toLanguageTag());
      out.write("\" checked />한국어\r\n");
      out.write("<input type=\"radio\" name=\"locale\" value=\"");
      out.print(Locale.ENGLISH.toLanguageTag());
      out.write("\" />영어\r\n");
      out.write("<input type=\"radio\" name=\"locale\" value=\"");
      out.print(Locale.JAPANESE.toLanguageTag());
      out.write("\" />일본어\r\n");
      out.write("<script>\r\n");
      out.write("// 	setTimeout(() => {\r\n");
      out.write("// 		location.reload();\r\n");
      out.write("// 	}, 1000);\r\n");
      out.write("	let timeArea = $(\"#timeArea\");\r\n");
      out.write("	let dataTypes = $('[name=\"dataType\"]');\r\n");
      out.write("	let locales = $('[name=\"locale\"]');\r\n");
      out.write("	let sucesses = {\r\n");
      out.write("		json:function(resp){\r\n");
      out.write("			timeArea.html(resp.now);\r\n");
      out.write("		},\r\n");
      out.write("		text:function(plain){\r\n");
      out.write("			timeArea.html(plain);\r\n");
      out.write("		}			\r\n");
      out.write("	}\r\n");
      out.write("	let sendRequest = function(){\r\n");
      out.write("//		2단계 : dataType 라디오 버튼의 선택 조건에 따라 비동기 요청 헤더(Accept) 설정.\r\n");
      out.write("//		데이터 타입에 따라 언어가 달라져야한다(success함수의 형태가 달라짐).->이걸 모아놓은 것이 석세시스\r\n");
      out.write("		let dataType = dataTypes.filter(\":checked\").data('dataType'); //data-type->카멜케이스로 바뀐다\r\n");
      out.write("		if(!dataType){\r\n");
      out.write("			dataType = \"json\";\r\n");
      out.write("			dataTypes.filter(\"[data-data-type=json]\").prop(\"checked\", true);\r\n");
      out.write("		}\r\n");
      out.write("//	 	3단계 : locale 라디오 버튼의 선택 값에 따라 비동기 요청의 locate 파라미터 결정됨\r\n");
      out.write("		let locale = locales.filter(\":checked\").val();\r\n");
      out.write("		let data = {}\r\n");
      out.write("		if(locale){\r\n");
      out.write("			data.locale=locale;\r\n");
      out.write("		}\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			url : \"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${pageContext.request.contextPath}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("/05/getServerTime\",\r\n");
      out.write("			data : data,\r\n");
      out.write("			dataType : dataType,\r\n");
      out.write("// 			success : function(resp){\r\n");
      out.write("// 				timeArea.html(resp.now);\r\n");
      out.write("// 			},\r\n");
      out.write("			success : sucesses[dataType],\r\n");
      out.write("			error : function(jqXHR, status, error) {\r\n");
      out.write("				console.log(jqXHR);\r\n");
      out.write("				console.log(status);\r\n");
      out.write("				console.log(error);\r\n");
      out.write("			}\r\n");
      out.write("		});\r\n");
      out.write("	}\r\n");
      out.write("	// 	1단계 : 컨트롤 버튼에 대한 클릭 이벤트 처리\r\n");
      out.write("	let controlBtns = $(\".controlBtn\").on(\"click\",function(){\r\n");
      out.write("		controlBtns.toggleClass(\"disabled\");\r\n");
      out.write("		//$(this).prop(\"disabled\",true);//해당객체에 프로퍼티를 셋팅할떄 <->속성은 attr(\"\",\"\")\r\n");
      out.write("		let controlType = $(this).data(\"controlType\");\r\n");
      out.write("		//눌린 버튼을 제이쿼리객체화 시킴\r\n");
      out.write("		if(controlType==\"START\"){\r\n");
      out.write("			// 	컨트롤버튼 타입이 START면 \r\n");
      out.write("			//  시계를작동\r\n");
      out.write("			let jobId = setInterval(sendRequest, 1000);\r\n");
      out.write("			timeArea.data(\"jobId\", jobId);\r\n");
      out.write("		} else {\r\n");
      out.write("			// 	컨트롤버튼 타입이 STOP이면\r\n");
      out.write("			// 	시계를 멈춤.\r\n");
      out.write("			let jobId = timeArea.data('jobId');\r\n");
      out.write("			if(jobId){ //jobId가 있다면\r\n");
      out.write("				clearInterval(jobId);\r\n");
      out.write("				timeArea.data(\"jobId\", null);\r\n");
      out.write("			}\r\n");
      out.write("		}\r\n");
      out.write("	});\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("\r\n");
      out.write("	\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
